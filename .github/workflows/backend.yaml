name: Backend CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Launch tests
        run: echo "run npm test, after writing tests"

      - name: Launch build
        run: npm run build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: |
            ./backend/dist
            ./backend/package.json

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: ./backend

      - name: Setup SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          sudo chmod 600 ~/.ssh/id_rsa

      - name: Add EC2 IP to known_hosts
        run: ssh-keyscan -H ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts

      - name: Clean up old files on the server
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_IP }} "
          rm -rf /home/ubuntu/my-server &&
          mkdir -p /home/ubuntu/my-server/dist"

      - name: Copy the dist folder to the server
        run: scp -i ~/.ssh/id_rsa -r ./backend/dist ubuntu@${{ secrets.EC2_IP }}:/home/ubuntu/my-server

      - name: Copy the package.json file to the server
        run: scp -i ~/.ssh/id_rsa ./backend/package.json ubuntu@${{ secrets.EC2_IP }}:/home/ubuntu/my-server

      - name: Add .env file to ~ folder with secrets
        run: |
          ssh -i ~/.ssh/id_rsa  ubuntu@${{ secrets.EC2_IP }} "
            touch ~/my-server/.env &&
            echo 'export DB_URI=\"${{secrets.DB_URI}}\"' > ~/my-server/.env &&
            echo 'export APP_IP=\"${{secrets.APP_IP}}\"' >> ~/my-server/.env &&
            echo 'export JWT_SECRET=\"${{secrets.JWT_SECRET}}\"' >> ~/my-server/.env &&
            echo 'export JWT_EXPIRES_IN=\"${{secrets.JWT_EXPIRES_IN}}\"' >> ~/my-server/.env &&
            echo 'export SERVER_URI=\"${{secrets.SERVER_URI}}\"' >> ~/my-server/.env &&
            echo 'export SMTP_SERVER_HOST=\"${{secrets.SMTP_SERVER_HOST}}\"' >> ~/my-server/.env &&
            echo 'export SMTP_SERVER_USERNAME=\"${{secrets.SMTP_SERVER_USERNAME}}\"' >> ~/my-server/.env &&
            echo 'export SMTP_SERVER_PASSWORD=\"${{secrets.SMTP_SERVER_PASSWORD}}\"' >> ~/my-server/.env &&
            if ! grep -q 'source ~/my-server/.env' ~/.bashrc; then
              echo 'source ~/my-server/.env' >> ~/.bashrc
            fi
          "

      - name: Run the production build
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_IP }} "
            source ~/my-server/.env &&
            cd ~/my-server &&
            npm install &&
            pm2 stop study-share-server || true &&
            pm2 delete study-share-server || true &&
            pm2 start npm --name 'study-share-server' -- run prod &&
            pm2 save
          "
